// Generated using `moon info`, DON'T EDIT IT
package "linear-program"

import(
  "Luna-Flow/linear-algebra/mutable"
  "Luna-Flow/luna-generic"
)

// Values
fn[V : ApproximatelyZero] double_equal_to_zero(V) -> Bool

// Types and methods
type Constraint[V]
fn[V] Constraint::add_eqpoly(Self[V], Poly[V], V) -> Unit
fn[V] Constraint::add_ineqpoly(Self[V], Poly[V], String, V) -> Unit
fn[V] Constraint::change_eqpoly(Self[V], Int, Poly[V], V) -> Unit
fn[V] Constraint::change_ineqpoly(Self[V], Int, Poly[V], String, V) -> Unit
fn[V : Eq + @luna-generic.Semiring] Constraint::from_array(eq_array~ : Array[(Array[V], V)] = .., ineq_array~ : Array[(Array[V], String, V)] = .., Array[Variable]) -> Self[V]
fn[V] Constraint::new() -> Self[V]
fn[V : @luna-generic.Zero] Constraint::to_matrix(Self[V], Array[Variable]) -> Array[Array[V]]
impl[V : Show + Eq + @luna-generic.Semiring] Show for Constraint[V]

type Lp[V]
fn[V : Eq + @luna-generic.Semiring] Lp::cons_from_Array(Self[V], eq_array~ : Array[(Array[V], V)] = .., ineq_array~ : Array[(Array[V], String, V)] = ..) -> Self[V]
fn[V : Eq + @luna-generic.Semiring] Lp::from_matrix(@mutable.Matrix[V], Array[Variable], String) -> Self[V]
fn[V] Lp::get_b_vector(Self[V]) -> Array[V]
fn[V] Lp::get_coeff_matrix(Self[V]) -> @mutable.Matrix[V]
fn[V] Lp::get_objfunc_vector(Self[V]) -> Array[V]
fn[V : @luna-generic.Zero] Lp::new(Obj_func[V], Array[Variable]) -> Self[V]
fn[V : @luna-generic.Zero + @luna-generic.One + Compare + Sub + Compare + Div + Mul + Show] Lp::phase_1(@mutable.Matrix[V], Array[Int]) -> @mutable.Matrix[V]
fn[V : @luna-generic.Zero + @luna-generic.One + Eq + ApproximatelyZero + Div + Sub + Mul + Show + Compare] Lp::phase_2(Array[Variable], Array[V], @mutable.Matrix[V]) -> (Array[V], V)
fn[V : @luna-generic.Zero + Compare + Div + Mul + Sub] Lp::pivot(@mutable.Matrix[V], Int, Int) -> Unit
fn[V : Compare + @luna-generic.Semiring + @luna-generic.Zero] Lp::reset_obj_byarray(Self[V], Array[V]) -> Self[V]
fn[V : @luna-generic.Zero + Compare + Sub + Mul + Div + Show] Lp::simplex_iteration(@mutable.Matrix[V], max_iterations~ : Int = .., debug~ : Bool = ..) -> Unit
fn[V : Eq + @luna-generic.Semiring + Compare + Neg + @luna-generic.Zero] Lp::to_standard(Self[V]) -> Self[V]
fn[V : Eq + @luna-generic.Zero + @luna-generic.One + Compare + Mul + Div + Sub + ApproximatelyZero + Show + Neg] Lp::two_stage(Self[V]) -> (Array[V], V)
impl[V : Show + Eq + @luna-generic.Semiring] Show for Lp[V]

type Obj_func[V]
fn[V : Eq + @luna-generic.Semiring + @luna-generic.Zero] Obj_func::add_term_inplace(Self[V], Variable, V) -> Unit
fn[V : Eq + @luna-generic.Semiring] Obj_func::from_array(String, Array[V], Array[Variable]) -> Self[V]
fn[V] Obj_func::judge_max(Self[V]) -> Bool
fn[V] Obj_func::new(String) -> Self[V]
fn[V] Obj_func::set_poly(Self[V], Poly[V]) -> Self[V]
fn[V : Eq + @luna-generic.Semiring + @luna-generic.Zero + Neg] Obj_func::to_min(Self[V]) -> Self[V]
fn[V : @luna-generic.Zero] Obj_func::to_vector(Self[V], Int) -> Array[V]
impl[V : Eq + Show + @luna-generic.Semiring] Show for Obj_func[V]

type Poly[V]
fn[V : Eq + @luna-generic.Semiring + @luna-generic.Zero] Poly::add_term_inplace(Self[V], Variable, V) -> Unit
fn[V : Eq + @luna-generic.Semiring + @luna-generic.Zero] Poly::copy(Self[V]) -> Self[V]
fn[V : Eq + @luna-generic.Semiring] Poly::from_var_array(Array[V], Array[Variable]) -> Self[V]
fn[V] Poly::new() -> Self[V]
fn[V] Poly::to_array(Self[V]) -> Array[V]
fn[V : @luna-generic.Zero] Poly::to_vector(Self[V], Array[Variable]) -> Array[V]
impl[V : Eq] Eq for Poly[V]
impl[V : Eq + @luna-generic.Semiring + @luna-generic.Zero + Neg] Neg for Poly[V]
impl[V : Eq + Show + @luna-generic.Semiring + @luna-generic.One] Show for Poly[V]

type Variable
fn Variable::new(String, Double, Double) -> Self
fn Variable::show_all(Self) -> String
impl @luna-generic.One for Variable
impl Compare for Variable
impl Eq for Variable
impl Show for Variable

// Type aliases

// Traits
pub trait ApproximatelyZero {
  is_zero_eps(Self) -> Bool
}
impl ApproximatelyZero for Int
impl ApproximatelyZero for Double

